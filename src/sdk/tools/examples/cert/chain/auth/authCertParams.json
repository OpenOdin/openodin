{
    " ## ": "The hex-encoded 6 byte header of the model type. This dictates what exact cert class will be created. A list of model types is available running `cert list`",
    "modelType": "000200010000",

    " ## ": "The expected publicKey of the handshaking peer who also will get the authorization of the cert issuer (the chain cert owner in this case).",
    " ## ": "Note that this array must contain exactly one public key.",
    "targetPublicKeys": ["!keyFileUser.json:.keyPair.publicKey"],

    " ## ": "From the UNIX time (ms) when this cert is valid.",
    "creationTime": 1664316000000,

    " ## ": "The cert has expired on this UNIX time ms.",
    "expireTime": 1695852000000,

    " ## ": "The chain cert we are using",
    "cert": "!../tmpChainCert.json:.cert",

    " ## ": "The calculated constraints for which this cert is valid. We load it from external file to not having to modify this file after the constraints have been calculated.",
    "constraints": "!constraints.json:.constraints",

    " ## ": "The allowed stack height for this cert. This is the last cert in the chain so we set this to 1 (the chain cert has it set to 2 ).",
    "maxChainLength": 1,

    " ## ": "If the signature is already created put that here in hex-encoding, otherwise make sure to pass the --keyfile argument to sign the created cert.",
    "signature": null,

    " ## ": "If this is set then limit the session maximum expire time.",
    "targetMaxExpireTime": null,

    " ## ": "Set to true to lock this auth cert on expected handshaking publicKey (given in the constraintParams file).",
    "isLockedOnPublicKey": false,

    " ## ": "Set to true to lock this auth cert on expected handshaking region (given in the constraintParams file).",
    "isLockedOnRegion": false,

    " ## ": "Set to true to lock this auth cert on expected handshaking jurisdiction (given in the constraintParams file).",
    "isLockedOnJurisdiction": false
}
