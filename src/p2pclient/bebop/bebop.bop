/**
 * These data structs are converted into TypeScript using the bebop tool: `npm run bebop`.
 * The types are used to serialize/deserialize the TypeScript structs defined in requestTypes.ts (see this file for documentation on the structs).
 * See: https://github.com/RainwayApp/bebop/wiki/Writing-Bops:-The-Bebop-Schema-Language
 */

struct LimitField {
    string name;
    uint16 limit;
}

struct Filter {
    string field;
    string operator;
    string cmp;
    byte[] value;
}

struct Match {
    byte[] nodeType;
    Filter[] filters;
    int32 limit;
    LimitField limitField;
    uint16[] level;
    bool discard;
    bool bottom;
    uint8 id;
    uint8 requireId;
    byte[] cursorId1;
}

struct AllowEmbed {
    byte[] nodeType;
    Filter[] filters;
}

struct FetchQuery {
    int32 depth;
    int32 limit;
    int64 cutoffTime;
    byte[] rootNodeId1;
    bool discardRoot;
    byte[] parentId;
    byte[] targetPublicKey;
    byte[] sourcePublicKey;
    Match[] match;
    AllowEmbed[] embed;
    byte[] triggerNodeId;
    uint16 triggerInterval;
    bool onlyTrigger;
    bool descending;
    bool orderByStorageTime;
    bool ignoreInactive;
    bool ignoreOwn;
    bool preserveTransient;
    string region;
    string jurisdiction;
    uint8 includeLicenses;
}

struct FetchCRDT {
    uint16 algo;
    string conf;
    byte[] msgId;
    bool reverse;
    int32 head;
    int32 tail;
    byte[] cursorId1;
    int32 cursorIndex;
}

enum Status {
    RESULT              = 1;
    MALFORMED           = 2;
    ERROR               = 3;
    STORE_FAILED        = 4;
    FETCH_FAILED        = 5;
    MISSING_ROOTNODE    = 6;
    ROOTNODE_LICENSED   = 7;
    NOT_ALLOWED         = 8;
    MISMATCH            = 9;
    EXISTS              = 10;
    MISSING_CURSOR      = 11;
    DROPPED_TRIGGER     = 12;
}

struct FetchResult {
    byte[][] nodes;
    byte[][] embed;
    int64 cutoffTime;
}

struct CRDTResult {
    byte[] delta;
    int32 cursorIndex;
    uint32 length;
}

[opcode(0x00000001)]
message BopFetchRequest {
    1 -> FetchQuery query;
    2 -> FetchCRDT crdt;
}

[opcode(0x00000002)]
message BopFetchResponse {
    1 -> Status status;
    2 -> FetchResult result;
    3 -> CRDTResult crdtResult;
    4 -> uint16 seq;
    5 -> uint16 endSeq;
    6 -> uint16 rowCount;
    7 -> string error;
}

[opcode(0x00000003)]
message BopStoreRequest {
    1 -> byte[][] nodes;
    2 -> byte[] sourcePublicKey;
    3 -> byte[] targetPublicKey;
    4 -> byte[][] muteMsgIds;
    5 -> bool preserveTransient;
    6 -> uint32 batchId;
    7 -> bool hasMore;
}

[opcode(0x00000004)]
message BopStoreResponse {
    1 -> Status status;
    2 -> byte[][] storedId1S;
    3 -> byte[][] missingBlobId1S;
    4 -> int64[] missingBlobSizes;
    5 -> string error;
}

[opcode(0x00000005)]
message BopUnsubscribeRequest {
    1 -> byte[] originalMsgId;
    2 -> byte[] targetPublicKey;
}

[opcode(0x00000006)]
message BopUnsubscribeResponse {
    1 -> Status status;
    2 -> string error;
}

[opcode(0x00000007)]
message BopWriteBlobRequest {
    1 -> byte[] nodeId1;
    2 -> byte[] sourcePublicKey;
    3 -> byte[] targetPublicKey;
    4 -> byte[] data;
    5 -> uint64 pos;
    6 -> byte[][] muteMsgIds;
}

[opcode(0x00000008)]
message BopWriteBlobResponse {
    1 -> Status status;
    2 -> uint64 currentLength;
    3 -> string error;
}

[opcode(0x00000009)]
message BopReadBlobRequest {
    1 -> byte[] nodeId1;
    2 -> byte[] targetPublicKey;
    3 -> byte[] sourcePublicKey;
    4 -> uint64 pos;
    5 -> uint32 length;
}

[opcode(0x0000000a)]
message BopReadBlobResponse {
    1 -> Status status;
    2 -> byte[] data;
    3 -> uint16 seq;
    4 -> uint16 endSeq;
    5 -> uint64 blobLength;
    6 -> string error;
}

[opcode(0x0000000b)]
message BopGenericMessageRequest {
    1 -> string action;
    2 -> byte[] sourcePublicKey;
    3 -> byte[] data;
}

[opcode(0x0000000c)]
message BopGenericMessageResponse {
    1 -> Status status;
    2 -> byte[] data;
    3 -> string error;
}
